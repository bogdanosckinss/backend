generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int          @id @default(autoincrement())
  name              String
  lastname          String?
  email             String?
  age               Int?
  image             String?
  city              String?
  social_media_link String?
  phone_number      String?
  confirmed         Boolean      @default(false)
  created_at        DateTime?    @default(now())
  updated_at        DateTime?    @updatedAt
  videoLikes        VideoLikes[]
  videoVotes        VideoVotes[]
  videos            Video[]

  @@map("users")
}

model Video {
  id               Int          @id @default(autoincrement())
  user_id          Int
  link             String
  created_at       DateTime?    @default(now())
  updated_at       DateTime?    @updatedAt
  allowed          Boolean      @default(false)
  under_moderation Boolean      @default(true)
  song_id          Int          @default(1)
  preview_url      String?      @default("")
  videoVotes       VideoVotes[]
  song             Song         @relation(fields: [song_id], references: [id])
  users            User         @relation(fields: [user_id], references: [id])

  @@map("videos")
}

model VideoLikes {
  id       Int  @id @default(autoincrement())
  user_id  Int
  video_id Int
  user     User @relation(fields: [user_id], references: [id])

  @@map("video_likes")
}

model VideoVotes {
  id       Int   @id @default(autoincrement())
  user_id  Int
  video_id Int
  user     User  @relation(fields: [user_id], references: [id])
  video    Video @relation(fields: [video_id], references: [id])

  @@map("video_votes")
}

model Song {
  id          Int       @id @default(autoincrement())
  minus_link  String
  plus_link   String
  image_link  String
  title       String
  description String
  author_name String
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
  videos      Video[]

  @@map("song")
}
